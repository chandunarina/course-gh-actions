name: environment-and-output

on: 
    workflow_dispatch: 

jobs:
    set_env_variables:
        runs-on: ubuntu-latest
        steps:
            - name: Set environment variable MY_ENV_VAR
              run: echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV
            - name: Use environment variable setup in the previous step of the same job
              run: |
                echo "The value of MY_ENV_VAR is $MY_ENV_VAR"
            - name: Use environment variable setup in the previous step of the same job again
              run: |
                echo ${{ env.MY_ENV_VAR }}  
            - id: step3
              name: set github_env_path variable into $GITHUB_ENV
              run: echo "github_env_path=$GITHUB_ENV" >>$GITHUB_ENV
            - id: step4
              name: printing "$GITHUB_ENV" file PATH
              run: echo ${{env.github_env_path}}
            - name: print "$GITHUB_ENV" file content
              id: step5
              run: echo "$(cat ${{env.github_env_path}})" 
            - id: step6
              name: accessing all previously defined Environment variables of the current job
              run: |
                echo "The value of MY_ENV_VAR is $MY_ENV_VAR"
                echo "The value of github_env_path is $github_env_path"                        
    set_env_variables_2:
        runs-on: ubuntu-latest
        steps:
        - name: Store build timestamp
          run: echo "BUILD_TIME=$(date +'%T')" >> $GITHUB_ENV

        - name: Deploy using stored timestamp
          run: echo "Deploying at $BUILD_TIME"    
        - name: Set the value
          id: step_one
          run: |
            echo "action_state=yellow" >> "$GITHUB_ENV"
        - name: Use the value
          id: step_two
          run: |
            printf '%s\n' "$action_state" # This will output 'yellow'       
            
        - name: Set the value in bash
          id: step_three
          run: |
            {
                echo 'JSON_RESPONSE<<EOF'
                curl https://example.com
                echo EOF
            } >> "$GITHUB_ENV"
        - name: print multi-line env value
          run: echo "$JSON_RESPONSE"

        - name: run multiline command
          run: |
            {
                echo "print1"
                echo "print2"
            }

    one_line_env_variable:
        runs-on: ubuntu-latest
        steps:
        - name: Defining a new Environment Variable
          run: |                          
            ONE_LINE_TEXT="This is a one-line text"
            echo "ONE_LINE_TEXT_ENV_VAR=$ONE_LINE_TEXT" >> $GITHUB_ENV
            
        - name: Using the previously defined environment variable
          run: |
            echo ${{ env.ONE_LINE_TEXT_ENV_VAR }}            
            
    multi_line_env_variable:
        runs-on: ubuntu-latest
        steps:
        - name: Defining a new Environment Variable
          run: |                          
            MULTI_LINES_TEXT="this is line one \n
                                this is line two \n
                                this is line three \n"    
            {
                echo "MULTI_LINES_TEXT_ENV_VAR<<XYZ"
                # here we can place the command that will generate multi-line text
                echo $MULTI_LINES_TEXT
                echo "XYZ"
            } >> $GITHUB_ENV
            
        - name: Using the previously defined environment variable
          run: |
            echo "multi-line-variable is: ${{ env.MULTI_LINES_TEXT_ENV_VAR }}"
    set_output_variable:
        runs-on: ubuntu-latest
        steps:
        - name: Set color
          id: color-selector
          run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
        - name: Get color
          env:
            SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
          run: echo "The selected color is $SELECTED_COLOR"     
        - name: Get color directly from previous step's output
          run: echo "The selected color is ${{ steps.color-selector.outputs.SELECTED_COLOR }}"        